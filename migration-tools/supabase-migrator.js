#!/usr/bin/env node

/**
 * Exchange Pro - Supabase Database Migration Tool
 * 
 * Ce script automatise le processus de migration entre bases de donn√©es Supabase :
 * - Export des sch√©mas et donn√©es
 * - D√©ploiement des edge functions
 * - Configuration des variables d'environnement
 * - Synchronisation compl√®te vers une nouvelle instance
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import readline from 'readline';

const Colors = {
  GREEN: '\x1b[32m',
  YELLOW: '\x1b[33m',
  RED: '\x1b[31m',
  BLUE: '\x1b[34m',
  RESET: '\x1b[0m',
  BOLD: '\x1b[1m'
};

class SupabaseMigrator {
  constructor() {
    this.config = {
      sourceProject: null,
      targetProject: null,
      sourceUrl: null,
      targetUrl: null,
      sourceKey: null,
      targetKey: null,
      backupDir: './migration-backup',
      migrationDate: new Date().toISOString().slice(0, 16).replace(/[:\-]/g, '').replace('T', '_')
    };
    
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  log(message, color = Colors.RESET) {
    console.log(`${color}${message}${Colors.RESET}`);
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(`${Colors.BLUE}${prompt}${Colors.RESET}`, resolve);
    });
  }

  async init() {
    this.log('\nüöÄ Exchange Pro - Supabase Migration Tool', Colors.BOLD + Colors.GREEN);
    this.log('===============================================\n', Colors.GREEN);
    
    this.log('Ce script va vous aider √† migrer votre base de donn√©es Supabase vers une nouvelle instance.\n', Colors.YELLOW);
    
    // Configuration de la source
    this.log('üìä Configuration de la base de donn√©es SOURCE :', Colors.BLUE);
    this.config.sourceProject = await this.question('ID du projet source (ex: bvleffevnnugjdwygqyz): ');
    this.config.sourceUrl = await this.question('URL Supabase source (ex: https://xxx.supabase.co): ');
    this.config.sourceKey = await this.question('Cl√© service role source: ');
    
    // Configuration de la cible
    this.log('\nüìà Configuration de la base de donn√©es CIBLE :', Colors.BLUE);
    this.config.targetProject = await this.question('ID du projet cible: ');
    this.config.targetUrl = await this.question('URL Supabase cible: ');
    this.config.targetKey = await this.question('Cl√© service role cible: ');
    
    const confirm = await this.question('\n‚ö†Ô∏è  √ätes-vous s√ªr de vouloir proc√©der √† la migration ? (oui/non): ');
    if (confirm.toLowerCase() !== 'oui') {
      this.log('‚ùå Migration annul√©e.', Colors.RED);
      process.exit(0);
    }
  }

  async createBackupDirectory() {
    this.log('\nüìÅ Cr√©ation du r√©pertoire de sauvegarde...', Colors.YELLOW);
    
    const backupPath = `${this.config.backupDir}_${this.config.migrationDate}`;
    this.config.backupDir = backupPath;
    
    if (!fs.existsSync(backupPath)) {
      fs.mkdirSync(backupPath, { recursive: true });
      fs.mkdirSync(`${backupPath}/migrations`, { recursive: true });
      fs.mkdirSync(`${backupPath}/functions`, { recursive: true });
      fs.mkdirSync(`${backupPath}/config`, { recursive: true });
    }
    
    this.log(`‚úÖ R√©pertoire cr√©√©: ${backupPath}`, Colors.GREEN);
  }

  async exportSchema() {
    this.log('\nüóÉÔ∏è  Export du sch√©ma de base de donn√©es...', Colors.YELLOW);
    
    try {
      // Export des migrations existantes
      if (fs.existsSync('./supabase/migrations')) {
        execSync(`cp -r ./supabase/migrations/* ${this.config.backupDir}/migrations/`, { stdio: 'inherit' });
        this.log('‚úÖ Migrations existantes sauvegard√©es', Colors.GREEN);
      }
      
      // Export du sch√©ma via pg_dump si disponible
      try {
        const dbUrl = `postgresql://postgres:[YOUR_PASSWORD]@db.${this.config.sourceProject}.supabase.co:5432/postgres`;
        execSync(`pg_dump "${dbUrl}" --schema-only > ${this.config.backupDir}/schema.sql`, { stdio: 'inherit' });
        this.log('‚úÖ Sch√©ma de base de donn√©es export√©', Colors.GREEN);
      } catch (error) {
        this.log('‚ö†Ô∏è  pg_dump non disponible, utilisation des migrations existantes', Colors.YELLOW);
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de l'export: ${error.message}`, Colors.RED);
      throw error;
    }
  }

  async exportFunctions() {
    this.log('\n‚ö° Export des Edge Functions...', Colors.YELLOW);
    
    try {
      if (fs.existsSync('./supabase/functions')) {
        execSync(`cp -r ./supabase/functions/* ${this.config.backupDir}/functions/`, { stdio: 'inherit' });
        
        // Cr√©er un fichier d'index des fonctions
        const functions = fs.readdirSync('./supabase/functions');
        const functionsList = functions.filter(f => fs.statSync(`./supabase/functions/${f}`).isDirectory());
        
        fs.writeFileSync(
          `${this.config.backupDir}/functions/functions-list.json`,
          JSON.stringify({ functions: functionsList, exportDate: new Date().toISOString() }, null, 2)
        );
        
        this.log(`‚úÖ ${functionsList.length} Edge Functions export√©es`, Colors.GREEN);
      }
    } catch (error) {
      this.log(`‚ùå Erreur lors de l'export des fonctions: ${error.message}`, Colors.RED);
      throw error;
    }
  }

  async exportConfig() {
    this.log('\n‚öôÔ∏è  Export de la configuration...', Colors.YELLOW);
    
    try {
      // Copier config.toml
      if (fs.existsSync('./supabase/config.toml')) {
        fs.copyFileSync('./supabase/config.toml', `${this.config.backupDir}/config/config.toml`);
      }
      
      // Cr√©er un fichier de configuration pour la migration
      const migrationConfig = {
        sourceProject: this.config.sourceProject,
        targetProject: this.config.targetProject,
        migrationDate: this.config.migrationDate,
        sourceUrl: this.config.sourceUrl,
        targetUrl: this.config.targetUrl,
        // Ne pas sauvegarder les cl√©s pour des raisons de s√©curit√©
        note: "Les cl√©s d'API doivent √™tre configur√©es manuellement pour des raisons de s√©curit√©"
      };
      
      fs.writeFileSync(
        `${this.config.backupDir}/config/migration-config.json`,
        JSON.stringify(migrationConfig, null, 2)
      );
      
      this.log('‚úÖ Configuration export√©e', Colors.GREEN);
    } catch (error) {
      this.log(`‚ùå Erreur lors de l'export de la configuration: ${error.message}`, Colors.RED);
      throw error;
    }
  }

  async linkToNewProject() {
    this.log('\nüîó Liaison avec le nouveau projet Supabase...', Colors.YELLOW);
    
    try {
      // V√©rifier si supabase CLI est install√©
      try {
        execSync('supabase --version', { stdio: 'pipe' });
      } catch {
        this.log('‚ùå Supabase CLI n\'est pas install√©. Installation requise:', Colors.RED);
        this.log('npm install -g supabase', Colors.YELLOW);
        return false;
      }
      
      // Cr√©er un nouveau fichier config.toml pour le projet cible
      const newConfig = `project_id = "${this.config.targetProject}"

[functions.moneroo-webhook]
verify_jwt = false

[functions.process-moneroo-payment]
verify_jwt = false

[functions.nowpayments-webhook]
verify_jwt = false

[functions.process-nowpayments-payment]
verify_jwt = false

[functions.make-admin]
verify_jwt = false

[functions.retry-payment]
verify_jwt = false

[functions.initiate-payout]
verify_jwt = false

[functions.send-notification-email]
verify_jwt = false

[functions.create-notification]
verify_jwt = false

[functions.setup-default-admin]
verify_jwt = false

[functions.update-admin-credentials]
verify_jwt = true

[functions.update-api-keys]
verify_jwt = true`;
      
      fs.writeFileSync('./supabase/config.toml', newConfig);
      this.log('‚úÖ Configuration mise √† jour avec le nouveau projet', Colors.GREEN);
      
      return true;
    } catch (error) {
      this.log(`‚ùå Erreur lors de la liaison: ${error.message}`, Colors.RED);
      return false;
    }
  }

  async deployMigrations() {
    this.log('\nüìä D√©ploiement des migrations...', Colors.YELLOW);
    
    try {
      // Appliquer les migrations
      execSync('supabase db push', { stdio: 'inherit' });
      this.log('‚úÖ Migrations appliqu√©es avec succ√®s', Colors.GREEN);
      
      return true;
    } catch (error) {
      this.log(`‚ùå Erreur lors du d√©ploiement des migrations: ${error.message}`, Colors.RED);
      return false;
    }
  }

  async deployFunctions() {
    this.log('\n‚ö° D√©ploiement des Edge Functions...', Colors.YELLOW);
    
    try {
      execSync('supabase functions deploy', { stdio: 'inherit' });
      this.log('‚úÖ Edge Functions d√©ploy√©es avec succ√®s', Colors.GREEN);
      
      return true;
    } catch (error) {
      this.log(`‚ùå Erreur lors du d√©ploiement des fonctions: ${error.message}`, Colors.RED);
      return false;
    }
  }

  async updateEnvironmentFiles() {
    this.log('\nüîß Mise √† jour des fichiers d\'environnement...', Colors.YELLOW);
    
    try {
      // Mettre √† jour .env
      if (fs.existsSync('.env')) {
        let envContent = fs.readFileSync('.env', 'utf8');
        envContent = envContent.replace(
          /VITE_SUPABASE_URL=.*/,
          `VITE_SUPABASE_URL=${this.config.targetUrl}`
        );
        // Note: La cl√© anonyme doit √™tre mise √† jour manuellement
        fs.writeFileSync('.env', envContent);
      }
      
      // Mettre √† jour .env.production
      if (fs.existsSync('.env.production')) {
        let envContent = fs.readFileSync('.env.production', 'utf8');
        envContent = envContent.replace(
          /VITE_SUPABASE_URL=.*/,
          `VITE_SUPABASE_URL=${this.config.targetUrl}`
        );
        fs.writeFileSync('.env.production', envContent);
      }
      
      this.log('‚úÖ Fichiers d\'environnement mis √† jour', Colors.GREEN);
      this.log('‚ö†Ô∏è  N\'oubliez pas de mettre √† jour la VITE_SUPABASE_ANON_KEY manuellement', Colors.YELLOW);
      
      return true;
    } catch (error) {
      this.log(`‚ùå Erreur lors de la mise √† jour: ${error.message}`, Colors.RED);
      return false;
    }
  }

  async generateMigrationReport() {
    this.log('\nüìã G√©n√©ration du rapport de migration...', Colors.YELLOW);
    
    const report = `# Rapport de Migration Supabase
## Exchange Pro - ${new Date().toLocaleString()}

### Informations de migration
- **Date**: ${new Date().toLocaleString()}
- **Projet source**: ${this.config.sourceProject}
- **Projet cible**: ${this.config.targetProject}
- **URL source**: ${this.config.sourceUrl}
- **URL cible**: ${this.config.targetUrl}

### √âl√©ments migr√©s
- ‚úÖ Sch√©ma de base de donn√©es
- ‚úÖ Edge Functions
- ‚úÖ Configuration du projet
- ‚úÖ Variables d'environnement

### Actions post-migration requises
1. **Mettre √† jour la cl√© anonyme Supabase**
   - R√©cup√©rer la nouvelle cl√© depuis le dashboard Supabase
   - Mettre √† jour VITE_SUPABASE_ANON_KEY dans .env et .env.production

2. **Configurer les variables d'environnement des Edge Functions**
   - Aller dans le dashboard Supabase > Edge Functions > Settings
   - Configurer les cl√©s API (MONEROO_API_KEY, NOWPAYMENTS_API_KEY, etc.)

3. **Tester l'application**
   - npm run dev pour tester en d√©veloppement
   - V√©rifier la connectivit√© √† la base de donn√©es
   - Tester les fonctions critiques

### Fichiers de sauvegarde
R√©pertoire de sauvegarde: \`${this.config.backupDir}\`

### Rollback
En cas de probl√®me, restaurer depuis la sauvegarde :
\`\`\`bash
cp -r ${this.config.backupDir}/migrations/* ./supabase/migrations/
cp -r ${this.config.backupDir}/functions/* ./supabase/functions/
cp ${this.config.backupDir}/config/config.toml ./supabase/config.toml
\`\`\`
`;
    
    fs.writeFileSync(`${this.config.backupDir}/MIGRATION_REPORT.md`, report);
    fs.writeFileSync('./MIGRATION_REPORT.md', report);
    
    this.log('‚úÖ Rapport de migration g√©n√©r√©', Colors.GREEN);
  }

  async run() {
    try {
      await this.init();
      await this.createBackupDirectory();
      await this.exportSchema();
      await this.exportFunctions();
      await this.exportConfig();
      
      const linked = await this.linkToNewProject();
      if (!linked) {
        this.log('‚ùå Impossible de lier le nouveau projet', Colors.RED);
        process.exit(1);
      }
      
      const migrationsDeployed = await this.deployMigrations();
      const functionsDeployed = await this.deployFunctions();
      
      if (migrationsDeployed && functionsDeployed) {
        await this.updateEnvironmentFiles();
        await this.generateMigrationReport();
        
        this.log('\nüéâ Migration termin√©e avec succ√®s !', Colors.BOLD + Colors.GREEN);
        this.log('üìã Consultez MIGRATION_REPORT.md pour les √©tapes suivantes', Colors.YELLOW);
      } else {
        this.log('\n‚ö†Ô∏è  Migration partiellement termin√©e', Colors.YELLOW);
        this.log('Consultez les erreurs ci-dessus et le rapport de migration', Colors.YELLOW);
      }
      
    } catch (error) {
      this.log(`\n‚ùå Erreur critique: ${error.message}`, Colors.RED);
      process.exit(1);
    } finally {
      this.rl.close();
    }
  }
}

// Ex√©cution du script
if (import.meta.url === `file://${process.argv[1]}`) {
  const migrator = new SupabaseMigrator();
  migrator.run().catch(console.error);
}

export default SupabaseMigrator;